import cv2
import numpy as np
from PIL import Image
import os
import pickle

# Paths
dataset_path = 'dataset'
rfid_mapping_file = os.path.join(dataset_path, 'rfid_mapping.pkl')
trainer_path = 'trainer'
if not os.path.exists(trainer_path):
    os.makedirs(trainer_path)

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# function to get the images and label data
def getImagesAndLabels(path):
    imagePaths = [os.path.join(path, f) for f in os.listdir(path) if f.startswith("User.")]
    faceSamples = []
    ids = []

    for imagePath in imagePaths:
        PIL_img = Image.open(imagePath).convert('L')
        img_numpy = np.array(PIL_img, 'uint8')
        id = int(os.path.split(imagePath)[-1].split(".")[1])
        faces = detector.detectMultiScale(img_numpy)

        for (x, y, w, h) in faces:
            faceSamples.append(img_numpy[y:y + h, x:x + w])
            ids.append(id)

    return faceSamples, ids

print("\n[INFO] Training faces. It will take a few seconds. Wait ...")
faces, ids = getImagesAndLabels(dataset_path)
recognizer.train(faces, np.array(ids))
recognizer.write(os.path.join(trainer_path, 'trainer.yml'))

print("\n[INFO] {0} faces trained. Model saved to 'trainer/trainer.yml'".format(len(np.unique(ids))))

# Backup RFID mapping during training
if os.path.exists(rfid_mapping_file):
    with open(rfid_mapping_file, 'rb') as f:
        rfid_map = pickle.load(f)
    with open(os.path.join(trainer_path, 'rfid_mapping.pkl'), 'wb') as f:
        pickle.dump(rfid_map, f)
    print("[INFO] RFID mapping also saved in 'trainer/rfid_mapping.pkl'")
else:
    print("[WARNING] No RFID mapping file found. Make sure to scan cards during face registration.")
